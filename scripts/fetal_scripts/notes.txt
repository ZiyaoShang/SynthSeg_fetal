
dependencies setup:
links:
https://saturncloud.io/blog/what-is-the-best-keras-version-to-use-with-tensorflowgpu-14/#:~:text=Keras%20Versions%20and%20Tensorflow%20Compatibility&text=As%20you%20can%20see%20from,with%20Tensorflow%202.5%20and%202.6.

https://www.tensorflow.org/install/source#gpu

https://stackoverflow.com/questions/62690377/tensorflow-compatibility-with-keras

installation Steps:
> conda create --name synthseg python=3.8
> pip install -r requirements_python3.8.txt
> conda install -c conda-forge cudnn=7.6.5
> conda install cudatoolkit=10.1.168

tmux:
> tmux new -s synthseg
> tmux detach
> tmux attach -t synthseg

scripts: 
> python -u -m scripts.fetal_scripts.training > logs.txt 2>&1 &
> (sleep 7h && kill 1495470) &

> strace -o log.txt -f -e trace=process,signal -p 861190 &

resource tracking:
> python -u -m scripts.fetal_scripts.cpu_monitor > cpu_log.txt 2>&1 &
> nohup watch -n 1 "nvidia-smi | awk 'NR==14' >> gpu_log.txt" >/dev/null 2>&1 &

Leomed:
ssh -J zshang@jump-menze.leomed.ethz.ch -l zshang login-menze.leomed.ethz.ch

Create env:
> enable_modules
> module load python/3.8.10
> module load scipy-stack/2022a
> VENV=/cluster/apps/menze/zshang/synthseg
> python3.8 -m venv $VENV
> source $VENV/bin/activate

activate env: 
>VENV=/cluster/apps/menze/zshang/synthseg
>source $VENV/bin/activate

run: 
> sbatch -c 3 --mem-per-cpu=32G --gres=gpu:3 --time 40:00:00 --output=output_.txt --wrap "python -u -m scripts.fetal_scripts.training > logs 2>&1"

srun --job-name interactive --cpus-per-task 1 --mem-per-cpu 10000 --time 01:00:00 -p gpu --gres=gpu:rtx2080ti:1 --pty bash

send file: 
scp /Users/ziyaoshang/Desktop/trash/synth/img_10_cluster_acexp_01234591011151617_kmeans.png zshang@login-menze.leomed.ethz.ch:/cluster/work/menze/zshang/synthseg_data
send folder:
scp -r /Users/ziyaoshang/Desktop/FeTA_synthetic zshang@login-menze.leomed.ethz.ch:/cluster/work/menze/zshang/synthseg_data/zurich/synth

Paths 
/cluster/home/zshang/SP/SynthSeg_fetal

conda env:

install conda: 
https://unlimited.ethz.ch/display/LeoMed2/Conda#Conda-InstallingConda

set solver:
conda install -n base conda-libmamba-solver
conda config --set solver libmamba

install dependencies:
conda install --file requirements_python3.8.txt -c anaconda 
(without the conda-forge channel)
next...tune if there are conflicts




Synthseg:

The nifti affine transformation:
The affine matrix in the NIfTI (Neuroimaging Informatics Technology Initiative) file header is a 4x4 matrix that defines the transformation from voxel indices to the world coordinates. It provides a mapping between the spatial coordinates in the image (in millimeters) and the voxel grid.

The affine matrix is used to convert the coordinates of a voxel in the image to the corresponding physical position in the scanner or physical space. This transformation is necessary because the voxel grid in the image may not directly correspond to the physical dimensions of the scanned object.

The affine matrix allows you to perform various spatial transformations, including rotations, translations, and scaling. By using the affine matrix, you can map points between the voxel space and the physical space, enabling various operations such as resampling, registration, and spatial normalization.

The first three rows represent the rotation, scaling, and shearing parameters, and the last column represents the translation parameters. The elements in this matrix define how the voxel coordinates in the image relate to the physical space coordinates.
